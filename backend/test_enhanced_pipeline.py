#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ pipeline —Å–æ–∑–¥–∞–Ω–∏—è –≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑—Ä–µ–∑–∞
—Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π –≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
"""

import sys
import os
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

from app.core.strategraphic_column import StrategraphicColumnProcessor
from app.core.geological_processor import GeologicalProcessor
import numpy as np
import cv2


def test_enhanced_pipeline():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π pipeline —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ pipeline –≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑—Ä–µ–∑–∞")
    print("="*70)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç—Ä–∞—Ç–∏–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∫–æ–ª–æ–Ω–∫–∏
    print("\nüìã –¢–ï–°–¢ 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞—Ç–∏–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∫–æ–ª–æ–Ω–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π")
    print("-" * 50)
    
    try:
        column_file = "uploads/strategraphic_column.jpg"
        if not os.path.exists(column_file):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {column_file}")
            return
            
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é
        print("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ë–ï–ó —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏:")
        processor_old = StrategraphicColumnProcessor(use_enhanced_cleaning=False)
        old_layers = processor_old.process_strategraphic_column(column_file)
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(old_layers)} —Å–ª–æ–µ–≤")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
        print("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –° —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π:")
        processor_new = StrategraphicColumnProcessor(use_enhanced_cleaning=True)
        new_layers = processor_new.process_strategraphic_column(column_file)
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(new_layers)} —Å–ª–æ–µ–≤")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        print("-" * 30)
        
        max_len = max(len(old_layers), len(new_layers))
        for i in range(max_len):
            old_text = old_layers[i] if i < len(old_layers) else "‚Äî"
            new_text = new_layers[i] if i < len(new_layers) else "‚Äî"
            
            print(f"\n–°–ª–æ–π {i+1}:")
            print(f"  –ë–ï–ó –æ—á–∏—Å—Ç–∫–∏: {old_text[:70]}{'...' if len(old_text) > 70 else ''}")
            print(f"  –° –æ—á–∏—Å—Ç–∫–æ–π:  {new_text[:70]}{'...' if len(new_text) > 70 else ''}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
            if i >= 4:
                if max_len > 5:
                    print(f"\n... –∏ –µ—â—ë {max_len - 5} —Å–ª–æ–µ–≤")
                break
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 1: {e}")
        import traceback
        traceback.print_exc()
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å GeologicalProcessor
    print("\n\nüó∫Ô∏è –¢–ï–°–¢ 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Ge–æ–ª–æ–≥icalProcessor")
    print("-" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã –∫–∞—Ä—Ç—ã –∏ –ª–µ–≥–µ–Ω–¥—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        map_file = "uploads/card.jpg"  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–∞—Ä—Ç–∞
        legend_file = "uploads/legend_20250802_230347_legend.jpg"
        
        missing_files = []
        if not os.path.exists(map_file):
            missing_files.append(map_file)
        if not os.path.exists(legend_file):
            missing_files.append(legend_file)
        
        if missing_files:
            print(f"‚ö†Ô∏è –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {', '.join(missing_files)}")
            print("   –¢–µ—Å—Ç–∏—Ä—É—é —Ç–æ–ª—å–∫–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–ª–æ–µ–≤...")
            
            # –°–æ–∑–¥–∞–µ–º GeologicalProcessor –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
            geo_processor = GeologicalProcessor()
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —á–∞—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
            print("üîÑ –°–æ–∑–¥–∞—é StrategraphicColumnProcessor —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π...")
            sc_processor = StrategraphicColumnProcessor(use_enhanced_cleaning=True)
            column_layers = sc_processor.process_strategraphic_column("uploads/strategraphic_column.jpg")
            
            print(f"‚úÖ GeologicalProcessor –ø–æ–ª—É—á–∏—Ç {len(column_layers)} –æ—á–∏—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–µ–≤")
            print("üìã –ü–µ—Ä–≤—ã–µ 3 —Å–ª–æ—è:")
            for i, layer in enumerate(column_layers[:3]):
                print(f"  {i+1}. {layer}")
        else:
            print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞—é –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            map_image = cv2.imread(map_file)
            legend_image = cv2.imread(legend_file)
            
            # –°–æ–∑–¥–∞–µ–º GeologicalProcessor  
            geo_processor = GeologicalProcessor()
            
            # –ó–∞–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–∏–Ω–∏—é —Ä–∞–∑—Ä–µ–∑–∞ (–ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏)
            height, width = map_image.shape[:2]
            start_point = (width // 4, height // 4)
            end_point = (3 * width // 4, 3 * height // 4)
            
            print(f"üîÑ –°–æ–∑–¥–∞—é —Ä–∞–∑—Ä–µ–∑ –æ—Ç {start_point} –¥–æ {end_point}...")
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
            result = geo_processor.process_geological_section(
                map_image, legend_image, start_point, end_point
            )
            
            print("‚úÖ –†–∞–∑—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–µ–≤ –≤ —Ä–∞–∑—Ä–µ–∑–µ: {len(result.get('layers', []))}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
            output_files = {
                '–ì–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑—Ä–µ–∑': result.get('output_path'),
                '–ö–∞—Ä—Ç–∞ —Å –ª–∏–Ω–∏–µ–π —Ä–∞–∑—Ä–µ–∑–∞': result.get('map_with_line_path'),
                '–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ª–µ–≥–µ–Ω–¥–∞': result.get('debug_legend_path')
            }
            
            print("\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
            for file_type, file_path in output_files.items():
                if file_path:
                    print(f"  üìÑ {file_type}: {file_path}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—è—Ö
            layers = result.get('layers', [])
            if layers:
                print("\nüìã –°–ª–æ–∏ –≤ —Ä–∞–∑—Ä–µ–∑–µ (—Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é):")
                for i, layer in enumerate(layers[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    name = layer.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                    length = layer.get('length', 0)
                    print(f"  {i+1}. {name} (–¥–ª–∏–Ω–∞: {length})")
                
                if len(layers) > 5:
                    print(f"  ... –∏ –µ—â—ë {len(layers) - 5} —Å–ª–æ–µ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–µ–≥–µ–Ω–¥—ã
            legend_data = result.get('legend_data', [])
            if legend_data:
                matched_count = sum(1 for block in legend_data if block.get('column_order', -1) >= 0)
                print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–µ–≥–µ–Ω–¥—ã:")
                print(f"  –í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤ –≤ –ª–µ–≥–µ–Ω–¥–µ: {len(legend_data)}")
                print(f"  –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å –∫–æ–ª–æ–Ω–∫–æ–π: {matched_count}")
                print(f"  –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ª–µ–≥–µ–Ω–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 2: {e}")
        import traceback
        traceback.print_exc()
    
    print("\n" + "="*70)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüí° –¢–µ–ø–µ—Ä—å GeologicalProcessor –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –æ—á–∏—Å—Ç–∫—É")
    print("   –≥–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞–∑—Ä–µ–∑–æ–≤!")


if __name__ == "__main__":
    test_enhanced_pipeline()